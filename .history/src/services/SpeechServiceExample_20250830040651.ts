import { Platform } from 'react-native';
import HybridSpeechService from './HybridSpeechService';
import TTSService from './TTSService';

/**
 * Exemplo de uso dos novos servi√ßos de fala
 * 
 * Este arquivo demonstra como usar os diferentes servi√ßos de fala
 * que criamos para resolver os problemas com expo-speech no Android
 */

export class SpeechServiceExample {
  
  /**
   * Exemplo b√°sico usando o servi√ßo h√≠brido
   */
  static async basicExample(): Promise<void> {
    try {
      console.log('üéØ Iniciando exemplo b√°sico de fala...');
      
      // Inicializar o servi√ßo para a plataforma atual
      await HybridSpeechService.initializeForPlatform();
      
      // Falar um texto simples
      await HybridSpeechService.speak('Ol√°, como voc√™ est√°?', {
        language: 'pt-BR',
        rate: 0.8,
        pitch: 1.0,
        onStart: () => console.log('üîä Fala iniciada'),
        onEnd: () => console.log('üîá Fala finalizada'),
        onError: (error) => console.error('‚ùå Erro na fala:', error),
      });
      
      console.log('‚úÖ Exemplo b√°sico conclu√≠do');
      
    } catch (error) {
      console.error('‚ùå Erro no exemplo b√°sico:', error);
    }
  }

  /**
   * Exemplo usando TTS espec√≠fico para Android
   */
  static async androidTTSExample(): Promise<void> {
    if (Platform.OS !== 'android') {
      console.log('‚ö†Ô∏è Este exemplo √© espec√≠fico para Android');
      return;
    }

    try {
      console.log('ü§ñ Iniciando exemplo TTS para Android...');
      
      // Inicializar TTS para Android
      await TTSService.initializeForAndroid();
      
      // Configurar idioma
      TTSService.setLanguage('pt-BR');
      
      // Falar com configura√ß√µes otimizadas para Android
      await TTSService.speak('Este √© um teste de fala no Android', {
        language: 'pt-BR',
        rate: 0.7, // Mais lento para melhor clareza
        pitch: 1.1, // Tom ligeiramente mais alto
        onStart: () => console.log('üîä TTS Android iniciado'),
        onFinish: () => console.log('üîá TTS Android finalizado'),
        onError: (error) => console.error('‚ùå Erro TTS Android:', error),
      });
      
      console.log('‚úÖ Exemplo TTS Android conclu√≠do');
      
    } catch (error) {
      console.error('‚ùå Erro no exemplo TTS Android:', error);
    }
  }

  /**
   * Exemplo de mudan√ßa de voz
   */
  static async voiceChangeExample(): Promise<void> {
    try {
      console.log('üé§ Iniciando exemplo de mudan√ßa de voz...');
      
      // Obter vozes dispon√≠veis
      const voices = await HybridSpeechService.getAvailableVoices();
      console.log(`üé§ Vozes dispon√≠veis: ${voices.length}`);
      
      if (voices.length > 0) {
        // Usar a primeira voz dispon√≠vel
        const firstVoice = voices[0];
        console.log(`üé§ Usando voz: ${firstVoice.name}`);
        
        await HybridSpeechService.speak('Teste com voz espec√≠fica', {
          language: 'pt-BR',
          voice: firstVoice.identifier || firstVoice.id,
          rate: 0.8,
          pitch: 1.0,
        });
      }
      
      console.log('‚úÖ Exemplo de mudan√ßa de voz conclu√≠do');
      
    } catch (error) {
      console.error('‚ùå Erro no exemplo de mudan√ßa de voz:', error);
    }
  }

  /**
   * Exemplo de sequ√™ncia de fala
   */
  static async speechSequenceExample(): Promise<void> {
    try {
      console.log('üéµ Iniciando exemplo de sequ√™ncia de fala...');
      
      const words = ['casa', 'carro', '√°rvore', 'sol'];
      
      for (const word of words) {
        console.log(`üó£Ô∏è Falando: ${word}`);
        
        await HybridSpeechService.speak(word, {
          language: 'pt-BR',
          rate: 0.6, // Mais lento para crian√ßas
          pitch: 1.2, // Tom mais alto e amig√°vel
          onStart: () => console.log(`üîä Iniciou: ${word}`),
          onEnd: () => console.log(`üîá Finalizou: ${word}`),
        });
        
        // Aguardar um pouco entre as palavras
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
      
      console.log('‚úÖ Exemplo de sequ√™ncia de fala conclu√≠do');
      
    } catch (error) {
      console.error('‚ùå Erro no exemplo de sequ√™ncia de fala:', error);
    }
  }

  /**
   * Exemplo de tratamento de erros e fallback
   */
  static async errorHandlingExample(): Promise<void> {
    try {
      console.log('üîÑ Iniciando exemplo de tratamento de erros...');
      
      // Tentar falar com configura√ß√µes que podem falhar
      await HybridSpeechService.speak('Teste de resili√™ncia', {
        language: 'invalid-language',
        rate: 2.0, // Taxa muito alta
        pitch: 3.0, // Tom muito alto
        onError: (error) => {
          console.log('‚ö†Ô∏è Erro capturado, tentando fallback...');
          // O servi√ßo h√≠brido tentar√° automaticamente outros motores
        },
      });
      
      console.log('‚úÖ Exemplo de tratamento de erros conclu√≠do');
      
    } catch (error) {
      console.error('‚ùå Erro no exemplo de tratamento de erros:', error);
    }
  }

  /**
   * Exemplo de configura√ß√£o de idiomas
   */
  static async languageConfigurationExample(): Promise<void> {
    try {
      console.log('üåç Iniciando exemplo de configura√ß√£o de idiomas...');
      
      const languages = ['pt-BR', 'en-US', 'es-ES'];
      
      for (const language of languages) {
        console.log(`üåç Configurando idioma: ${language}`);
        
        HybridSpeechService.setLanguage(language);
        
        await HybridSpeechService.speak(`Ol√° em ${language}`, {
          language: language,
          rate: 0.8,
          pitch: 1.0,
        });
        
        // Aguardar entre idiomas
        await new Promise(resolve => setTimeout(resolve, 1500));
      }
      
      console.log('‚úÖ Exemplo de configura√ß√£o de idiomas conclu√≠do');
      
    } catch (error) {
      console.error('‚ùå Erro no exemplo de configura√ß√£o de idiomas:', error);
    }
  }

  /**
   * Exemplo de limpeza e destrui√ß√£o
   */
  static async cleanupExample(): Promise<void> {
    try {
      console.log('üßπ Iniciando exemplo de limpeza...');
      
      // Parar qualquer fala em andamento
      await HybridSpeechService.stop();
      
      // Verificar se est√° falando
      const isSpeaking = HybridSpeechService.isCurrentlySpeaking();
      console.log(`üîä Est√° falando: ${isSpeaking}`);
      
      // Obter o motor atual
      const currentEngine = HybridSpeechService.getCurrentEngine();
      console.log(`üîß Motor atual: ${currentEngine}`);
      
      // Limpar recursos (chamar apenas quando necess√°rio)
      // HybridSpeechService.destroy();
      
      console.log('‚úÖ Exemplo de limpeza conclu√≠do');
      
    } catch (error) {
      console.error('‚ùå Erro no exemplo de limpeza:', error);
    }
  }

  /**
   * Executar todos os exemplos
   */
  static async runAllExamples(): Promise<void> {
    console.log('üöÄ Iniciando todos os exemplos de fala...\n');
    
    try {
      await this.basicExample();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      await this.androidTTSExample();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      await this.voiceChangeExample();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      await this.speechSequenceExample();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      await this.errorHandlingExample();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      await this.languageConfigurationExample();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      await this.cleanupExample();
      
      console.log('\nüéâ Todos os exemplos conclu√≠dos com sucesso!');
      
    } catch (error) {
      console.error('\n‚ùå Erro ao executar exemplos:', error);
    }
  }
}

export default SpeechServiceExample;
